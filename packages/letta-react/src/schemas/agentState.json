{
  "properties": {
    "created_by_id": {
      "anyOf": [{ "type": "string" }, { "type": "null" }],
      "title": "Created By Id",
      "description": "The id of the user that made this object."
    },
    "last_updated_by_id": {
      "anyOf": [{ "type": "string" }, { "type": "null" }],
      "title": "Last Updated By Id",
      "description": "The id of the user that made this object."
    },
    "created_at": {
      "anyOf": [
        { "type": "string", "format": "date-time" },
        { "type": "null" }
      ],
      "title": "Created At",
      "description": "The timestamp when the object was created."
    },
    "updated_at": {
      "anyOf": [
        { "type": "string", "format": "date-time" },
        { "type": "null" }
      ],
      "title": "Updated At",
      "description": "The timestamp when the object was last updated."
    },
    "id": {
      "type": "string",
      "title": "Id",
      "description": "The id of the agent. Assigned by the database."
    },
    "name": {
      "type": "string",
      "title": "Name",
      "description": "The name of the agent."
    },
    "tool_rules": {
      "anyOf": [
        {
          "items": {
            "oneOf": [
              {
                "properties": {
                  "tool_name": {
                    "type": "string",
                    "title": "Tool Name",
                    "description": "The name of the tool. Must exist in the database for the user's organization."
                  },
                  "type": {
                    "type": "string",
                    "const": "constrain_child_tools",
                    "title": "Type",
                    "default": "constrain_child_tools"
                  },
                  "children": {
                    "items": { "type": "string" },
                    "type": "array",
                    "title": "Children",
                    "description": "The children tools that can be invoked."
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": ["tool_name", "children"],
                "title": "ChildToolRule",
                "description": "A ToolRule represents a tool that can be invoked by the agent.",
                "x-readme-ref-name": "ChildToolRule"
              },
              {
                "properties": {
                  "tool_name": {
                    "type": "string",
                    "title": "Tool Name",
                    "description": "The name of the tool. Must exist in the database for the user's organization."
                  },
                  "type": {
                    "type": "string",
                    "const": "run_first",
                    "title": "Type",
                    "default": "run_first"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": ["tool_name"],
                "title": "InitToolRule",
                "description": "Represents the initial tool rule configuration.",
                "x-readme-ref-name": "InitToolRule"
              },
              {
                "properties": {
                  "tool_name": {
                    "type": "string",
                    "title": "Tool Name",
                    "description": "The name of the tool. Must exist in the database for the user's organization."
                  },
                  "type": {
                    "type": "string",
                    "const": "exit_loop",
                    "title": "Type",
                    "default": "exit_loop"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": ["tool_name"],
                "title": "TerminalToolRule",
                "description": "Represents a terminal tool rule configuration where if this tool gets called, it must end the agent loop.",
                "x-readme-ref-name": "TerminalToolRule"
              },
              {
                "properties": {
                  "tool_name": {
                    "type": "string",
                    "title": "Tool Name",
                    "description": "The name of the tool. Must exist in the database for the user's organization."
                  },
                  "type": {
                    "type": "string",
                    "const": "conditional",
                    "title": "Type",
                    "default": "conditional"
                  },
                  "default_child": {
                    "anyOf": [{ "type": "string" }, { "type": "null" }],
                    "title": "Default Child",
                    "description": "The default child tool to be called. If None, any tool can be called."
                  },
                  "child_output_mapping": {
                    "additionalProperties": { "type": "string" },
                    "type": "object",
                    "title": "Child Output Mapping",
                    "description": "The output case to check for mapping"
                  },
                  "require_output_mapping": {
                    "type": "boolean",
                    "title": "Require Output Mapping",
                    "description": "Whether to throw an error when output doesn't match any case",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": ["tool_name", "child_output_mapping"],
                "title": "ConditionalToolRule",
                "description": "A ToolRule that conditionally maps to different child tools based on the output.",
                "x-readme-ref-name": "ConditionalToolRule"
              },
              {
                "properties": {
                  "tool_name": {
                    "type": "string",
                    "title": "Tool Name",
                    "description": "The name of the tool. Must exist in the database for the user's organization."
                  },
                  "type": {
                    "type": "string",
                    "const": "continue_loop",
                    "title": "Type",
                    "default": "continue_loop"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": ["tool_name"],
                "title": "ContinueToolRule",
                "description": "Represents a tool rule configuration where if this tool gets called, it must continue the agent loop.",
                "x-readme-ref-name": "ContinueToolRule"
              },
              {
                "properties": {
                  "tool_name": {
                    "type": "string",
                    "title": "Tool Name",
                    "description": "The name of the tool. Must exist in the database for the user's organization."
                  },
                  "type": {
                    "type": "string",
                    "const": "max_count_per_step",
                    "title": "Type",
                    "default": "max_count_per_step"
                  },
                  "max_count_limit": {
                    "type": "integer",
                    "title": "Max Count Limit",
                    "description": "The max limit for the total number of times this tool can be invoked in a single step."
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": ["tool_name", "max_count_limit"],
                "title": "MaxCountPerStepToolRule",
                "description": "Represents a tool rule configuration which constrains the total number of times this tool can be invoked in a single step.",
                "x-readme-ref-name": "MaxCountPerStepToolRule"
              },
              {
                "properties": {
                  "tool_name": {
                    "type": "string",
                    "title": "Tool Name",
                    "description": "The name of the tool. Must exist in the database for the user's organization."
                  },
                  "type": {
                    "type": "string",
                    "const": "parent_last_tool",
                    "title": "Type",
                    "default": "parent_last_tool"
                  },
                  "children": {
                    "items": { "type": "string" },
                    "type": "array",
                    "title": "Children",
                    "description": "The children tools that can be invoked."
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": ["tool_name", "children"],
                "title": "ParentToolRule",
                "description": "A ToolRule that only allows a child tool to be called if the parent has been called.",
                "x-readme-ref-name": "ParentToolRule"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "conditional": "#/components/schemas/ConditionalToolRule",
                "constrain_child_tools": "#/components/schemas/ChildToolRule",
                "continue_loop": "#/components/schemas/ContinueToolRule",
                "exit_loop": "#/components/schemas/TerminalToolRule",
                "max_count_per_step": "#/components/schemas/MaxCountPerStepToolRule",
                "parent_last_tool": "#/components/schemas/ParentToolRule",
                "run_first": "#/components/schemas/InitToolRule"
              }
            }
          },
          "type": "array"
        },
        { "type": "null" }
      ],
      "title": "Tool Rules",
      "description": "The list of tool rules."
    },
    "message_ids": {
      "anyOf": [
        { "items": { "type": "string" }, "type": "array" },
        { "type": "null" }
      ],
      "title": "Message Ids",
      "description": "The ids of the messages in the agent's in-context memory."
    },
    "system": {
      "type": "string",
      "title": "System",
      "description": "The system prompt used by the agent."
    },
    "agent_type": {
      "description": "The type of agent.",
      "type": "string",
      "enum": ["memgpt_agent", "split_thread_agent", "sleeptime_agent"],
      "title": "AgentType",
      "x-readme-ref-name": "AgentType"
    },
    "llm_config": {
      "description": "The LLM configuration used by the agent.",
      "properties": {
        "model": {
          "type": "string",
          "title": "Model",
          "description": "LLM model name. "
        },
        "model_endpoint_type": {
          "type": "string",
          "enum": [
            "openai",
            "anthropic",
            "cohere",
            "google_ai",
            "google_vertex",
            "azure",
            "groq",
            "ollama",
            "webui",
            "webui-legacy",
            "lmstudio",
            "lmstudio-legacy",
            "lmstudio-chatcompletions",
            "llamacpp",
            "koboldcpp",
            "vllm",
            "hugging-face",
            "mistral",
            "together",
            "bedrock",
            "deepseek",
            "xai"
          ],
          "title": "Model Endpoint Type",
          "description": "The endpoint type for the model."
        },
        "model_endpoint": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "title": "Model Endpoint",
          "description": "The endpoint for the model."
        },
        "model_wrapper": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "title": "Model Wrapper",
          "description": "The wrapper for the model."
        },
        "context_window": {
          "type": "integer",
          "title": "Context Window",
          "description": "The context window size for the model."
        },
        "put_inner_thoughts_in_kwargs": {
          "anyOf": [{ "type": "boolean" }, { "type": "null" }],
          "title": "Put Inner Thoughts In Kwargs",
          "description": "Puts 'inner_thoughts' as a kwarg in the function call if this is set to True. This helps with function calling performance and also the generation of inner thoughts.",
          "default": true
        },
        "handle": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "title": "Handle",
          "description": "The handle for this config, in the format provider/model-name."
        },
        "temperature": {
          "type": "number",
          "title": "Temperature",
          "description": "The temperature to use when generating text with the model. A higher temperature will result in more random text.",
          "default": 0.7
        },
        "max_tokens": {
          "anyOf": [{ "type": "integer" }, { "type": "null" }],
          "title": "Max Tokens",
          "description": "The maximum number of tokens to generate. If not set, the model will use its default value.",
          "default": 4096
        },
        "enable_reasoner": {
          "type": "boolean",
          "title": "Enable Reasoner",
          "description": "Whether or not the model should use extended thinking if it is a 'reasoning' style model",
          "default": false
        },
        "max_reasoning_tokens": {
          "type": "integer",
          "title": "Max Reasoning Tokens",
          "description": "Configurable thinking budget for extended thinking, only used if enable_reasoner is True. Minimum value is 1024.",
          "default": 0
        }
      },
      "type": "object",
      "required": ["model", "model_endpoint_type", "context_window"],
      "title": "LLMConfig",
      "x-readme-ref-name": "LLMConfig"
    },
    "embedding_config": {
      "properties": {
        "embedding_endpoint_type": {
          "type": "string",
          "enum": [
            "openai",
            "anthropic",
            "bedrock",
            "cohere",
            "google_ai",
            "google_vertex",
            "azure",
            "groq",
            "ollama",
            "webui",
            "webui-legacy",
            "lmstudio",
            "lmstudio-legacy",
            "llamacpp",
            "koboldcpp",
            "vllm",
            "hugging-face",
            "mistral",
            "together"
          ],
          "title": "Embedding Endpoint Type",
          "description": "The endpoint type for the model."
        },
        "embedding_endpoint": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "title": "Embedding Endpoint",
          "description": "The endpoint for the model (`None` if local)."
        },
        "embedding_model": {
          "type": "string",
          "title": "Embedding Model",
          "description": "The model for the embedding."
        },
        "embedding_dim": {
          "type": "integer",
          "title": "Embedding Dim",
          "description": "The dimension of the embedding."
        },
        "embedding_chunk_size": {
          "anyOf": [{ "type": "integer" }, { "type": "null" }],
          "title": "Embedding Chunk Size",
          "description": "The chunk size of the embedding.",
          "default": 300
        },
        "handle": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "title": "Handle",
          "description": "The handle for this config, in the format provider/model-name."
        },
        "azure_endpoint": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "title": "Azure Endpoint",
          "description": "The Azure endpoint for the model."
        },
        "azure_version": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "title": "Azure Version",
          "description": "The Azure version for the model."
        },
        "azure_deployment": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "title": "Azure Deployment",
          "description": "The Azure deployment for the model."
        }
      },
      "type": "object",
      "required": [
        "embedding_endpoint_type",
        "embedding_model",
        "embedding_dim"
      ],
      "title": "EmbeddingConfig",
      "description": "The embedding configuration used by the agent.",
      "x-readme-ref-name": "EmbeddingConfig"
    },
    "description": {
      "anyOf": [{ "type": "string" }, { "type": "null" }],
      "title": "Description",
      "description": "The description of the agent."
    },
    "metadata": {
      "anyOf": [
        { "additionalProperties": true, "type": "object" },
        { "type": "null" }
      ],
      "title": "Metadata",
      "description": "The metadata of the agent."
    },
    "memory": {
      "description": "The in-context memory of the agent.",
      "properties": {
        "blocks": {
          "items": {
            "properties": {
              "value": {
                "type": "string",
                "title": "Value",
                "description": "Value of the block."
              },
              "limit": {
                "type": "integer",
                "title": "Limit",
                "description": "Character limit of the block.",
                "default": 5000
              },
              "name": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "title": "Name",
                "description": "Name of the block if it is a template."
              },
              "is_template": {
                "type": "boolean",
                "title": "Is Template",
                "description": "Whether the block is a template (e.g. saved human/persona options).",
                "default": false
              },
              "label": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "title": "Label",
                "description": "Label of the block (e.g. 'human', 'persona') in the context window."
              },
              "description": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "title": "Description",
                "description": "Description of the block."
              },
              "metadata": {
                "anyOf": [
                  { "additionalProperties": true, "type": "object" },
                  { "type": "null" }
                ],
                "title": "Metadata",
                "description": "Metadata of the block.",
                "default": {}
              },
              "id": {
                "type": "string",
                "pattern": "^block-[a-fA-F0-9]{8}",
                "title": "Id",
                "description": "The human-friendly ID of the Block",
                "examples": ["block-123e4567-e89b-12d3-a456-426614174000"]
              },
              "created_by_id": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "title": "Created By Id",
                "description": "The id of the user that made this Block."
              },
              "last_updated_by_id": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "title": "Last Updated By Id",
                "description": "The id of the user that last updated this Block."
              }
            },
            "type": "object",
            "required": ["value"],
            "title": "Block",
            "description": "A Block represents a reserved section of the LLM's context window which is editable. `Block` objects contained in the `Memory` object, which is able to edit the Block values.\n\nParameters:\n    label (str): The label of the block (e.g. 'human', 'persona'). This defines a category for the block.\n    value (str): The value of the block. This is the string that is represented in the context window.\n    limit (int): The character limit of the block.\n    is_template (bool): Whether the block is a template (e.g. saved human/persona options). Non-template blocks are not stored in the database and are ephemeral, while templated blocks are stored in the database.\n    label (str): The label of the block (e.g. 'human', 'persona'). This defines a category for the block.\n    template_name (str): The name of the block template (if it is a template).\n    description (str): Description of the block.\n    metadata (Dict): Metadata of the block.\n    user_id (str): The unique identifier of the user associated with the block.",
            "x-readme-ref-name": "Block"
          },
          "type": "array",
          "title": "Blocks",
          "description": "Memory blocks contained in the agent's in-context memory"
        },
        "prompt_template": {
          "type": "string",
          "title": "Prompt Template",
          "description": "Jinja2 template for compiling memory blocks into a prompt string",
          "default": "{% for block in blocks %}<{{ block.label }} characters=\"{{ block.value|length }}/{{ block.limit }}\">\n{{ block.value }}\n</{{ block.label }}>{% if not loop.last %}\n{% endif %}{% endfor %}"
        }
      },
      "type": "object",
      "required": ["blocks"],
      "title": "Memory",
      "x-readme-ref-name": "Memory"
    },
    "tools": {
      "items": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^tool-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Tool",
            "examples": ["tool-123e4567-e89b-12d3-a456-426614174000"]
          },
          "tool_type": {
            "description": "The type of the tool.",
            "default": "custom",
            "type": "string",
            "enum": [
              "custom",
              "letta_core",
              "letta_memory_core",
              "letta_multi_agent_core",
              "letta_sleeptime_core",
              "external_composio",
              "external_langchain",
              "external_mcp"
            ],
            "title": "ToolType",
            "x-readme-ref-name": "ToolType"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "The description of the tool."
          },
          "source_type": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Source Type",
            "description": "The type of the source code."
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name",
            "description": "The name of the function."
          },
          "tags": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Tags",
            "description": "Metadata tags.",
            "default": []
          },
          "source_code": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Source Code",
            "description": "The source code of the function."
          },
          "json_schema": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Json Schema",
            "description": "The JSON schema of the function."
          },
          "args_json_schema": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Args Json Schema",
            "description": "The args JSON schema of the function."
          },
          "return_char_limit": {
            "type": "integer",
            "title": "Return Char Limit",
            "description": "The maximum number of characters in the response.",
            "default": 6000
          },
          "created_by_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Created By Id",
            "description": "The id of the user that made this Tool."
          },
          "last_updated_by_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Last Updated By Id",
            "description": "The id of the user that made this Tool."
          },
          "metadata_": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Metadata",
            "description": "A dictionary of additional metadata for the tool."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Tool",
        "description": "Representation of a tool, which is a function that can be called by the agent.\n\nParameters:\n    id (str): The unique identifier of the tool.\n    name (str): The name of the function.\n    tags (List[str]): Metadata tags.\n    source_code (str): The source code of the function.\n    json_schema (Dict): The JSON schema of the function.",
        "x-readme-ref-name": "Tool"
      },
      "type": "array",
      "title": "Tools",
      "description": "The tools used by the agent."
    },
    "sources": {
      "items": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^source-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Source",
            "examples": ["source-123e4567-e89b-12d3-a456-426614174000"]
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the source."
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "The description of the source."
          },
          "embedding_config": {
            "description": "The embedding configuration used by the source.",
            "properties": {
              "embedding_endpoint_type": {
                "type": "string",
                "enum": [
                  "openai",
                  "anthropic",
                  "bedrock",
                  "cohere",
                  "google_ai",
                  "google_vertex",
                  "azure",
                  "groq",
                  "ollama",
                  "webui",
                  "webui-legacy",
                  "lmstudio",
                  "lmstudio-legacy",
                  "llamacpp",
                  "koboldcpp",
                  "vllm",
                  "hugging-face",
                  "mistral",
                  "together"
                ],
                "title": "Embedding Endpoint Type",
                "description": "The endpoint type for the model."
              },
              "embedding_endpoint": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "title": "Embedding Endpoint",
                "description": "The endpoint for the model (`None` if local)."
              },
              "embedding_model": {
                "type": "string",
                "title": "Embedding Model",
                "description": "The model for the embedding."
              },
              "embedding_dim": {
                "type": "integer",
                "title": "Embedding Dim",
                "description": "The dimension of the embedding."
              },
              "embedding_chunk_size": {
                "anyOf": [{ "type": "integer" }, { "type": "null" }],
                "title": "Embedding Chunk Size",
                "description": "The chunk size of the embedding.",
                "default": 300
              },
              "handle": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "title": "Handle",
                "description": "The handle for this config, in the format provider/model-name."
              },
              "azure_endpoint": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "title": "Azure Endpoint",
                "description": "The Azure endpoint for the model."
              },
              "azure_version": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "title": "Azure Version",
                "description": "The Azure version for the model."
              },
              "azure_deployment": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "title": "Azure Deployment",
                "description": "The Azure deployment for the model."
              }
            },
            "type": "object",
            "required": [
              "embedding_endpoint_type",
              "embedding_model",
              "embedding_dim"
            ],
            "title": "EmbeddingConfig",
            "x-readme-ref-name": "EmbeddingConfig"
          },
          "metadata": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Metadata",
            "description": "Metadata associated with the source."
          },
          "created_by_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Created By Id",
            "description": "The id of the user that made this Tool."
          },
          "last_updated_by_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Last Updated By Id",
            "description": "The id of the user that made this Tool."
          },
          "created_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Created At",
            "description": "The timestamp when the source was created."
          },
          "updated_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Updated At",
            "description": "The timestamp when the source was last updated."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "embedding_config"],
        "title": "Source",
        "description": "Representation of a source, which is a collection of files and passages.\n\nParameters:\n    id (str): The ID of the source\n    name (str): The name of the source.\n    embedding_config (EmbeddingConfig): The embedding configuration used by the source.\n    user_id (str): The ID of the user that created the source.\n    metadata (dict): Metadata associated with the source.\n    description (str): The description of the source.",
        "x-readme-ref-name": "Source"
      },
      "type": "array",
      "title": "Sources",
      "description": "The sources used by the agent."
    },
    "tags": {
      "items": { "type": "string" },
      "type": "array",
      "title": "Tags",
      "description": "The tags associated with the agent."
    },
    "tool_exec_environment_variables": {
      "items": {
        "properties": {
          "created_by_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Created By Id",
            "description": "The id of the user that made this object."
          },
          "last_updated_by_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Last Updated By Id",
            "description": "The id of the user that made this object."
          },
          "created_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Created At",
            "description": "The timestamp when the object was created."
          },
          "updated_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Updated At",
            "description": "The timestamp when the object was last updated."
          },
          "id": {
            "type": "string",
            "pattern": "^agent-env-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Agent-env",
            "examples": ["agent-env-123e4567-e89b-12d3-a456-426614174000"]
          },
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The name of the environment variable."
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The value of the environment variable."
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "An optional description of the environment variable."
          },
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "The ID of the agent this environment variable belongs to."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["key", "value", "agent_id"],
        "title": "AgentEnvironmentVariable",
        "x-readme-ref-name": "AgentEnvironmentVariable"
      },
      "type": "array",
      "title": "Tool Exec Environment Variables",
      "description": "The environment variables for tool execution specific to this agent."
    },
    "project_id": {
      "anyOf": [{ "type": "string" }, { "type": "null" }],
      "title": "Project Id",
      "description": "The id of the project the agent belongs to."
    },
    "template_id": {
      "anyOf": [{ "type": "string" }, { "type": "null" }],
      "title": "Template Id",
      "description": "The id of the template the agent belongs to."
    },
    "base_template_id": {
      "anyOf": [{ "type": "string" }, { "type": "null" }],
      "title": "Base Template Id",
      "description": "The base template id of the agent."
    },
    "identity_ids": {
      "items": { "type": "string" },
      "type": "array",
      "title": "Identity Ids",
      "description": "The ids of the identities associated with this agent.",
      "default": []
    },
    "message_buffer_autoclear": {
      "type": "boolean",
      "title": "Message Buffer Autoclear",
      "description": "If set to True, the agent will not remember previous messages (though the agent will still retain state via core memory blocks and archival/recall memory). Not recommended unless you have an advanced use case.",
      "default": false
    },
    "enable_sleeptime": {
      "anyOf": [{ "type": "boolean" }, { "type": "null" }],
      "title": "Enable Sleeptime",
      "description": "If set to True, memory management will move to a background agent thread."
    },
    "multi_agent_group": {
      "anyOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id",
              "description": "The id of the group. Assigned by the database."
            },
            "manager_type": {
              "description": "",
              "type": "string",
              "enum": [
                "round_robin",
                "supervisor",
                "dynamic",
                "sleeptime",
                "swarm"
              ],
              "title": "ManagerType",
              "x-readme-ref-name": "ManagerType"
            },
            "agent_ids": {
              "items": { "type": "string" },
              "type": "array",
              "title": "Agent Ids",
              "description": ""
            },
            "description": {
              "type": "string",
              "title": "Description",
              "description": ""
            },
            "shared_block_ids": {
              "items": { "type": "string" },
              "type": "array",
              "title": "Shared Block Ids",
              "description": "",
              "default": []
            },
            "manager_agent_id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Manager Agent Id",
              "description": ""
            },
            "termination_token": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Termination Token",
              "description": ""
            },
            "max_turns": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Max Turns",
              "description": ""
            },
            "sleeptime_agent_frequency": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Sleeptime Agent Frequency",
              "description": ""
            },
            "turns_counter": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Turns Counter",
              "description": ""
            },
            "last_processed_message_id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Last Processed Message Id",
              "description": ""
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": ["id", "manager_type", "agent_ids", "description"],
          "title": "Group",
          "x-readme-ref-name": "Group"
        },
        { "type": "null" }
      ],
      "description": "The multi-agent group that this agent manages"
    }
  },
  "additionalProperties": false,
  "type": "object",
  "required": [
    "id",
    "name",
    "system",
    "agent_type",
    "llm_config",
    "embedding_config",
    "memory",
    "tools",
    "sources",
    "tags"
  ],
  "title": "AgentState",
  "description": "Representation of an agent's state. This is the state of the agent at a given time, and is persisted in the DB backend. The state has all the information needed to recreate a persisted agent.\n\nParameters:\n    id (str): The unique identifier of the agent.\n    name (str): The name of the agent (must be unique to the user).\n    created_at (datetime): The datetime the agent was created.\n    message_ids (List[str]): The ids of the messages in the agent's in-context memory.\n    memory (Memory): The in-context memory of the agent.\n    tools (List[str]): The tools used by the agent. This includes any memory editing functions specified in `memory`.\n    system (str): The system prompt used by the agent.\n    llm_config (LLMConfig): The LLM configuration used by the agent.\n    embedding_config (EmbeddingConfig): The embedding configuration used by the agent.",
  "x-readme-ref-name": "AgentState"
}
