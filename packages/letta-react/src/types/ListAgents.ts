/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type { AgentState } from './AgentState.ts';
import type { HTTPValidationError } from './HTTPValidationError.ts';

export type ListAgentsQueryParams = {
  /**
   * @description Name of the agent
   */
  name?: string | null;
  /**
   * @description List of tags to filter agents by
   */
  tags?: string[] | null;
  /**
   * @description If True, only returns agents that match ALL given tags. Otherwise, return agents that have ANY of the passed-in tags.
   * @default false
   * @type boolean | undefined
   */
  match_all_tags?: boolean;
  /**
   * @description Cursor for pagination
   */
  before?: string | null;
  /**
   * @description Cursor for pagination
   */
  after?: string | null;
  /**
   * @description Limit for pagination
   * @default 50
   */
  limit?: number | null;
  /**
   * @description Search agents by name
   */
  query_text?: string | null;
  /**
   * @description Search agents by project ID
   */
  project_id?: string | null;
  /**
   * @description Search agents by template ID
   */
  template_id?: string | null;
  /**
   * @description Search agents by base template ID
   */
  base_template_id?: string | null;
  /**
   * @description Search agents by identity ID
   */
  identity_id?: string | null;
  /**
   * @description Search agents by identifier keys
   */
  identifier_keys?: string[] | null;
  /**
   * @description Specify which relational fields (e.g., \'tools\', \'sources\', \'memory\') to include in the response. If not provided, all relationships are loaded by default. Using this can optimize performance by reducing unnecessary joins.
   */
  include_relationships?: string[] | null;
  /**
   * @description Whether to sort agents oldest to newest (True) or newest to oldest (False, default)
   * @default false
   * @type boolean | undefined
   */
  ascending?: boolean;
};

/**
 * @description Successful Response
 */
export type ListAgents200 = AgentState[];

/**
 * @description Validation Error
 */
export type ListAgents422 = HTTPValidationError;

export type ListAgentsQueryResponse = ListAgents200;

export type ListAgentsQuery = {
  Response: ListAgents200;
  QueryParams: ListAgentsQueryParams;
  Errors: ListAgents422;
};
