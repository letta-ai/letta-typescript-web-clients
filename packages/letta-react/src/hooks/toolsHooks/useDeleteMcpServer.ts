/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { DeleteMcpServerMutationResponse, DeleteMcpServerPathParams, DeleteMcpServer422 } from '../../types/DeleteMcpServer.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const deleteMcpServerMutationKey = () => [{ url: '/v1/tools/mcp/servers/{mcp_server_name}' }] as const

export type DeleteMcpServerMutationKey = ReturnType<typeof deleteMcpServerMutationKey>

/**
 * @description Add a new MCP server to the Letta MCP server config
 * @summary Delete Mcp Server From Config
 * {@link /v1/tools/mcp/servers/:mcp_server_name}
 */
export async function deleteMcpServer(
  mcp_server_name: DeleteMcpServerPathParams['mcp_server_name'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<DeleteMcpServerMutationResponse, ResponseErrorConfig<DeleteMcpServer422>, unknown>({
    method: 'DELETE',
    url: `/v1/tools/mcp/servers/${mcp_server_name}`,
    ...requestConfig,
  })
  return res
}

/**
 * @description Add a new MCP server to the Letta MCP server config
 * @summary Delete Mcp Server From Config
 * {@link /v1/tools/mcp/servers/:mcp_server_name}
 */
export function useDeleteMcpServer<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeleteMcpServerMutationResponse>,
      ResponseErrorConfig<DeleteMcpServer422>,
      { mcp_server_name: DeleteMcpServerPathParams['mcp_server_name'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deleteMcpServerMutationKey()

  return useMutation<
    ResponseConfig<DeleteMcpServerMutationResponse>,
    ResponseErrorConfig<DeleteMcpServer422>,
    { mcp_server_name: DeleteMcpServerPathParams['mcp_server_name'] },
    TContext
  >(
    {
      mutationFn: async ({ mcp_server_name }) => {
        return deleteMcpServer(mcp_server_name, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}