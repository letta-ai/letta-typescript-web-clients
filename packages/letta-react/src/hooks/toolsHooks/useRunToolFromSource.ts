/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RunToolFromSourceMutationRequest, RunToolFromSourceMutationResponse, RunToolFromSource422 } from '../../types/RunToolFromSource.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const runToolFromSourceMutationKey = () => [{ url: '/v1/tools/run' }] as const

export type RunToolFromSourceMutationKey = ReturnType<typeof runToolFromSourceMutationKey>

/**
 * @description Attempt to build a tool from source, then run it on the provided arguments
 * @summary Run Tool From Source
 * {@link /v1/tools/run}
 */
export async function runToolFromSource(
  data: RunToolFromSourceMutationRequest,
  config: Partial<RequestConfig<RunToolFromSourceMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<RunToolFromSourceMutationResponse, ResponseErrorConfig<RunToolFromSource422>, RunToolFromSourceMutationRequest>({
    method: 'POST',
    url: `/v1/tools/run`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @description Attempt to build a tool from source, then run it on the provided arguments
 * @summary Run Tool From Source
 * {@link /v1/tools/run}
 */
export function useRunToolFromSource<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<RunToolFromSourceMutationResponse>,
      ResponseErrorConfig<RunToolFromSource422>,
      { data: RunToolFromSourceMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<RunToolFromSourceMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? runToolFromSourceMutationKey()

  return useMutation<
    ResponseConfig<RunToolFromSourceMutationResponse>,
    ResponseErrorConfig<RunToolFromSource422>,
    { data: RunToolFromSourceMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return runToolFromSource(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}