/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  ListMcpToolsByServerQueryResponse,
  ListMcpToolsByServerPathParams,
  ListMcpToolsByServer422,
} from '../../types/ListMcpToolsByServer.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { queryOptions, useQuery } from '@tanstack/react-query';

export const listMcpToolsByServerQueryKey = (
  mcp_server_name: ListMcpToolsByServerPathParams['mcp_server_name']
) =>
  [
    {
      url: '/v1/tools/mcp/servers/:mcp_server_name/tools',
      params: { mcp_server_name: mcp_server_name },
    },
  ] as const;

export type ListMcpToolsByServerQueryKey = ReturnType<
  typeof listMcpToolsByServerQueryKey
>;

/**
 * @description Get a list of all tools for a specific MCP server
 * @summary List Mcp Tools By Server
 * {@link /v1/tools/mcp/servers/:mcp_server_name/tools}
 */
export async function listMcpToolsByServer(
  mcp_server_name: ListMcpToolsByServerPathParams['mcp_server_name'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    ListMcpToolsByServerQueryResponse,
    ResponseErrorConfig<ListMcpToolsByServer422>,
    unknown
  >({
    method: 'GET',
    url: `/v1/tools/mcp/servers/${mcp_server_name}/tools`,
    ...requestConfig,
  });
  return res;
}

export function listMcpToolsByServerQueryOptions(
  mcp_server_name: ListMcpToolsByServerPathParams['mcp_server_name'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = listMcpToolsByServerQueryKey(mcp_server_name);
  return queryOptions<
    ResponseConfig<ListMcpToolsByServerQueryResponse>,
    ResponseErrorConfig<ListMcpToolsByServer422>,
    ResponseConfig<ListMcpToolsByServerQueryResponse>,
    typeof queryKey
  >({
    enabled: !!mcp_server_name,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return listMcpToolsByServer(mcp_server_name, config);
    },
  });
}

/**
 * @description Get a list of all tools for a specific MCP server
 * @summary List Mcp Tools By Server
 * {@link /v1/tools/mcp/servers/:mcp_server_name/tools}
 */
export function useListMcpToolsByServer<
  TData = ResponseConfig<ListMcpToolsByServerQueryResponse>,
  TQueryData = ResponseConfig<ListMcpToolsByServerQueryResponse>,
  TQueryKey extends QueryKey = ListMcpToolsByServerQueryKey
>(
  mcp_server_name: ListMcpToolsByServerPathParams['mcp_server_name'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<ListMcpToolsByServerQueryResponse>,
        ResponseErrorConfig<ListMcpToolsByServer422>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? listMcpToolsByServerQueryKey(mcp_server_name);

  const query = useQuery(
    {
      ...(listMcpToolsByServerQueryOptions(
        mcp_server_name,
        config
      ) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient
  ) as UseQueryResult<TData, ResponseErrorConfig<ListMcpToolsByServer422>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
