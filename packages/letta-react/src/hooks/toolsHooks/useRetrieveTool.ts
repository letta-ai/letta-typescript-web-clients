/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RetrieveToolQueryResponse, RetrieveToolPathParams, RetrieveTool422 } from '../../types/RetrieveTool.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const retrieveToolQueryKey = (tool_id: RetrieveToolPathParams['tool_id']) => [{ url: '/v1/tools/:tool_id', params: { tool_id: tool_id } }] as const

export type RetrieveToolQueryKey = ReturnType<typeof retrieveToolQueryKey>

/**
 * @description Get a tool by ID
 * @summary Retrieve Tool
 * {@link /v1/tools/:tool_id}
 */
export async function retrieveTool(tool_id: RetrieveToolPathParams['tool_id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<RetrieveToolQueryResponse, ResponseErrorConfig<RetrieveTool422>, unknown>({
    method: 'GET',
    url: `/v1/tools/${tool_id}`,
    ...requestConfig,
  })
  return res
}

export function retrieveToolQueryOptions(tool_id: RetrieveToolPathParams['tool_id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = retrieveToolQueryKey(tool_id)
  return queryOptions<
    ResponseConfig<RetrieveToolQueryResponse>,
    ResponseErrorConfig<RetrieveTool422>,
    ResponseConfig<RetrieveToolQueryResponse>,
    typeof queryKey
  >({
    enabled: !!tool_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return retrieveTool(tool_id, config)
    },
  })
}

/**
 * @description Get a tool by ID
 * @summary Retrieve Tool
 * {@link /v1/tools/:tool_id}
 */
export function useRetrieveTool<
  TData = ResponseConfig<RetrieveToolQueryResponse>,
  TQueryData = ResponseConfig<RetrieveToolQueryResponse>,
  TQueryKey extends QueryKey = RetrieveToolQueryKey,
>(
  tool_id: RetrieveToolPathParams['tool_id'],
  options: {
    query?: Partial<QueryObserverOptions<ResponseConfig<RetrieveToolQueryResponse>, ResponseErrorConfig<RetrieveTool422>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? retrieveToolQueryKey(tool_id)

  const query = useQuery(
    {
      ...(retrieveToolQueryOptions(tool_id, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<RetrieveTool422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}