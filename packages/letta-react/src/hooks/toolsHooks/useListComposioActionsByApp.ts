/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  ListComposioActionsByAppQueryResponse,
  ListComposioActionsByAppPathParams,
  ListComposioActionsByApp422,
} from '../../types/ListComposioActionsByApp.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const listComposioActionsByAppQueryKey = (composio_app_name: ListComposioActionsByAppPathParams['composio_app_name']) =>
  [{ url: '/v1/tools/composio/apps/:composio_app_name/actions', params: { composio_app_name: composio_app_name } }] as const

export type ListComposioActionsByAppQueryKey = ReturnType<typeof listComposioActionsByAppQueryKey>

/**
 * @description Get a list of all Composio actions for a specific app
 * @summary List Composio Actions By App
 * {@link /v1/tools/composio/apps/:composio_app_name/actions}
 */
export async function listComposioActionsByApp(
  composio_app_name: ListComposioActionsByAppPathParams['composio_app_name'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ListComposioActionsByAppQueryResponse, ResponseErrorConfig<ListComposioActionsByApp422>, unknown>({
    method: 'GET',
    url: `/v1/tools/composio/apps/${composio_app_name}/actions`,
    ...requestConfig,
  })
  return res
}

export function listComposioActionsByAppQueryOptions(
  composio_app_name: ListComposioActionsByAppPathParams['composio_app_name'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = listComposioActionsByAppQueryKey(composio_app_name)
  return queryOptions<
    ResponseConfig<ListComposioActionsByAppQueryResponse>,
    ResponseErrorConfig<ListComposioActionsByApp422>,
    ResponseConfig<ListComposioActionsByAppQueryResponse>,
    typeof queryKey
  >({
    enabled: !!composio_app_name,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listComposioActionsByApp(composio_app_name, config)
    },
  })
}

/**
 * @description Get a list of all Composio actions for a specific app
 * @summary List Composio Actions By App
 * {@link /v1/tools/composio/apps/:composio_app_name/actions}
 */
export function useListComposioActionsByApp<
  TData = ResponseConfig<ListComposioActionsByAppQueryResponse>,
  TQueryData = ResponseConfig<ListComposioActionsByAppQueryResponse>,
  TQueryKey extends QueryKey = ListComposioActionsByAppQueryKey,
>(
  composio_app_name: ListComposioActionsByAppPathParams['composio_app_name'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<ListComposioActionsByAppQueryResponse>,
        ResponseErrorConfig<ListComposioActionsByApp422>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listComposioActionsByAppQueryKey(composio_app_name)

  const query = useQuery(
    {
      ...(listComposioActionsByAppQueryOptions(composio_app_name, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<ListComposioActionsByApp422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}