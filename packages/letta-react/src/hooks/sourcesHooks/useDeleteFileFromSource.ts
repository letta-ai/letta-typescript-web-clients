/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { DeleteFileFromSourceMutationResponse, DeleteFileFromSourcePathParams, DeleteFileFromSource422 } from '../../types/DeleteFileFromSource.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const deleteFileFromSourceMutationKey = () => [{ url: '/v1/sources/{source_id}/{file_id}' }] as const

export type DeleteFileFromSourceMutationKey = ReturnType<typeof deleteFileFromSourceMutationKey>

/**
 * @description Delete a data source.
 * @summary Delete File From Source
 * {@link /v1/sources/:source_id/:file_id}
 */
export async function deleteFileFromSource(
  source_id: DeleteFileFromSourcePathParams['source_id'],
  file_id: DeleteFileFromSourcePathParams['file_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<DeleteFileFromSourceMutationResponse, ResponseErrorConfig<DeleteFileFromSource422>, unknown>({
    method: 'DELETE',
    url: `/v1/sources/${source_id}/${file_id}`,
    ...requestConfig,
  })
  return res
}

/**
 * @description Delete a data source.
 * @summary Delete File From Source
 * {@link /v1/sources/:source_id/:file_id}
 */
export function useDeleteFileFromSource<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeleteFileFromSourceMutationResponse>,
      ResponseErrorConfig<DeleteFileFromSource422>,
      { source_id: DeleteFileFromSourcePathParams['source_id']; file_id: DeleteFileFromSourcePathParams['file_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deleteFileFromSourceMutationKey()

  return useMutation<
    ResponseConfig<DeleteFileFromSourceMutationResponse>,
    ResponseErrorConfig<DeleteFileFromSource422>,
    { source_id: DeleteFileFromSourcePathParams['source_id']; file_id: DeleteFileFromSourcePathParams['file_id'] },
    TContext
  >(
    {
      mutationFn: async ({ source_id, file_id }) => {
        return deleteFileFromSource(source_id, file_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}