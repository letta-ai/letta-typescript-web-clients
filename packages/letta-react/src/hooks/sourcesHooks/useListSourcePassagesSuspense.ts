/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  ListSourcePassagesQueryResponse,
  ListSourcePassagesPathParams,
  ListSourcePassages422,
} from '../../types/ListSourcePassages.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  QueryKey,
  QueryClient,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query';

export const listSourcePassagesSuspenseQueryKey = (
  source_id: ListSourcePassagesPathParams['source_id']
) =>
  [
    {
      url: '/v1/sources/:source_id/passages',
      params: { source_id: source_id },
    },
  ] as const;

export type ListSourcePassagesSuspenseQueryKey = ReturnType<
  typeof listSourcePassagesSuspenseQueryKey
>;

/**
 * @description List all passages associated with a data source.
 * @summary List Source Passages
 * {@link /v1/sources/:source_id/passages}
 */
export async function listSourcePassagesSuspense(
  source_id: ListSourcePassagesPathParams['source_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    ListSourcePassagesQueryResponse,
    ResponseErrorConfig<ListSourcePassages422>,
    unknown
  >({
    method: 'GET',
    url: `/v1/sources/${source_id}/passages`,
    ...requestConfig,
  });
  return res;
}

export function listSourcePassagesSuspenseQueryOptions(
  source_id: ListSourcePassagesPathParams['source_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = listSourcePassagesSuspenseQueryKey(source_id);
  return queryOptions<
    ResponseConfig<ListSourcePassagesQueryResponse>,
    ResponseErrorConfig<ListSourcePassages422>,
    ResponseConfig<ListSourcePassagesQueryResponse>,
    typeof queryKey
  >({
    enabled: !!source_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return listSourcePassagesSuspense(source_id, config);
    },
  });
}

/**
 * @description List all passages associated with a data source.
 * @summary List Source Passages
 * {@link /v1/sources/:source_id/passages}
 */
export function useListSourcePassagesSuspense<
  TData = ResponseConfig<ListSourcePassagesQueryResponse>,
  TQueryData = ResponseConfig<ListSourcePassagesQueryResponse>,
  TQueryKey extends QueryKey = ListSourcePassagesSuspenseQueryKey
>(
  source_id: ListSourcePassagesPathParams['source_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<ListSourcePassagesQueryResponse>,
        ResponseErrorConfig<ListSourcePassages422>,
        TData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? listSourcePassagesSuspenseQueryKey(source_id);

  const query = useSuspenseQuery(
    {
      ...(listSourcePassagesSuspenseQueryOptions(
        source_id,
        config
      ) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<ListSourcePassages422>
  > & { queryKey: TQueryKey };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
