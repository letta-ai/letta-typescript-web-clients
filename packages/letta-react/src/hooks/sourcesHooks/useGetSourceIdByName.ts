/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { GetSourceIdByNameQueryResponse, GetSourceIdByNamePathParams, GetSourceIdByName422 } from '../../types/GetSourceIdByName.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getSourceIdByNameQueryKey = (source_name: GetSourceIdByNamePathParams['source_name']) =>
  [{ url: '/v1/sources/name/:source_name', params: { source_name: source_name } }] as const

export type GetSourceIdByNameQueryKey = ReturnType<typeof getSourceIdByNameQueryKey>

/**
 * @description Get a source by name
 * @summary Get Source Id By Name
 * {@link /v1/sources/name/:source_name}
 */
export async function getSourceIdByName(
  source_name: GetSourceIdByNamePathParams['source_name'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetSourceIdByNameQueryResponse, ResponseErrorConfig<GetSourceIdByName422>, unknown>({
    method: 'GET',
    url: `/v1/sources/name/${source_name}`,
    ...requestConfig,
  })
  return res
}

export function getSourceIdByNameQueryOptions(
  source_name: GetSourceIdByNamePathParams['source_name'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getSourceIdByNameQueryKey(source_name)
  return queryOptions<
    ResponseConfig<GetSourceIdByNameQueryResponse>,
    ResponseErrorConfig<GetSourceIdByName422>,
    ResponseConfig<GetSourceIdByNameQueryResponse>,
    typeof queryKey
  >({
    enabled: !!source_name,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getSourceIdByName(source_name, config)
    },
  })
}

/**
 * @description Get a source by name
 * @summary Get Source Id By Name
 * {@link /v1/sources/name/:source_name}
 */
export function useGetSourceIdByName<
  TData = ResponseConfig<GetSourceIdByNameQueryResponse>,
  TQueryData = ResponseConfig<GetSourceIdByNameQueryResponse>,
  TQueryKey extends QueryKey = GetSourceIdByNameQueryKey,
>(
  source_name: GetSourceIdByNamePathParams['source_name'],
  options: {
    query?: Partial<
      QueryObserverOptions<ResponseConfig<GetSourceIdByNameQueryResponse>, ResponseErrorConfig<GetSourceIdByName422>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getSourceIdByNameQueryKey(source_name)

  const query = useQuery(
    {
      ...(getSourceIdByNameQueryOptions(source_name, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetSourceIdByName422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}