/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  ClientSideAccessTokensCreateClientSideAccessTokenMutationRequest,
  ClientSideAccessTokensCreateClientSideAccessTokenMutationResponse,
  ClientSideAccessTokensCreateClientSideAccessToken400,
} from '../../../types/clientSideAccessTokens/CreateClientSideAccessToken.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const clientSideAccessTokensCreateClientSideAccessTokenMutationKey = () => [{ url: '/v1/client-side-access-tokens' }] as const

export type ClientSideAccessTokensCreateClientSideAccessTokenMutationKey = ReturnType<typeof clientSideAccessTokensCreateClientSideAccessTokenMutationKey>

/**
 * @description Create a new client side access token with the specified configuration.
 * @summary Create Client Side Access Token
 * {@link /v1/client-side-access-tokens}
 */
export async function clientSideAccessTokensCreateClientSideAccessToken(
  data: ClientSideAccessTokensCreateClientSideAccessTokenMutationRequest,
  config: Partial<RequestConfig<ClientSideAccessTokensCreateClientSideAccessTokenMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ClientSideAccessTokensCreateClientSideAccessTokenMutationResponse,
    ResponseErrorConfig<ClientSideAccessTokensCreateClientSideAccessToken400>,
    ClientSideAccessTokensCreateClientSideAccessTokenMutationRequest
  >({ method: 'POST', url: `/v1/client-side-access-tokens`, data, ...requestConfig })
  return res
}

/**
 * @description Create a new client side access token with the specified configuration.
 * @summary Create Client Side Access Token
 * {@link /v1/client-side-access-tokens}
 */
export function useClientSideAccessTokensCreateClientSideAccessToken<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<ClientSideAccessTokensCreateClientSideAccessTokenMutationResponse>,
      ResponseErrorConfig<ClientSideAccessTokensCreateClientSideAccessToken400>,
      { data: ClientSideAccessTokensCreateClientSideAccessTokenMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<ClientSideAccessTokensCreateClientSideAccessTokenMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? clientSideAccessTokensCreateClientSideAccessTokenMutationKey()

  return useMutation<
    ResponseConfig<ClientSideAccessTokensCreateClientSideAccessTokenMutationResponse>,
    ResponseErrorConfig<ClientSideAccessTokensCreateClientSideAccessToken400>,
    { data: ClientSideAccessTokensCreateClientSideAccessTokenMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return clientSideAccessTokensCreateClientSideAccessToken(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}