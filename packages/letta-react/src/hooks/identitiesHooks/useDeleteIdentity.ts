/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { DeleteIdentityMutationResponse, DeleteIdentityPathParams, DeleteIdentity422 } from '../../types/DeleteIdentity.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const deleteIdentityMutationKey = () => [{ url: '/v1/identities/{identity_id}' }] as const

export type DeleteIdentityMutationKey = ReturnType<typeof deleteIdentityMutationKey>

/**
 * @description Delete an identity by its identifier key
 * @summary Delete Identity
 * {@link /v1/identities/:identity_id}
 */
export async function deleteIdentity(identity_id: DeleteIdentityPathParams['identity_id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<DeleteIdentityMutationResponse, ResponseErrorConfig<DeleteIdentity422>, unknown>({
    method: 'DELETE',
    url: `/v1/identities/${identity_id}`,
    ...requestConfig,
  })
  return res
}

/**
 * @description Delete an identity by its identifier key
 * @summary Delete Identity
 * {@link /v1/identities/:identity_id}
 */
export function useDeleteIdentity<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeleteIdentityMutationResponse>,
      ResponseErrorConfig<DeleteIdentity422>,
      { identity_id: DeleteIdentityPathParams['identity_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deleteIdentityMutationKey()

  return useMutation<
    ResponseConfig<DeleteIdentityMutationResponse>,
    ResponseErrorConfig<DeleteIdentity422>,
    { identity_id: DeleteIdentityPathParams['identity_id'] },
    TContext
  >(
    {
      mutationFn: async ({ identity_id }) => {
        return deleteIdentity(identity_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}