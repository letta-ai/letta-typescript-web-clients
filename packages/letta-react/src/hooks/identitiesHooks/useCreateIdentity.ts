/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  CreateIdentityMutationRequest,
  CreateIdentityMutationResponse,
  CreateIdentityHeaderParams,
  CreateIdentity422,
} from '../../types/CreateIdentity.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const createIdentityMutationKey = () => [{ url: '/v1/identities/' }] as const

export type CreateIdentityMutationKey = ReturnType<typeof createIdentityMutationKey>

/**
 * @summary Create Identity
 * {@link /v1/identities/}
 */
export async function createIdentity(
  data: CreateIdentityMutationRequest,
  headers?: CreateIdentityHeaderParams,
  config: Partial<RequestConfig<CreateIdentityMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CreateIdentityMutationResponse, ResponseErrorConfig<CreateIdentity422>, CreateIdentityMutationRequest>({
    method: 'POST',
    url: `/v1/identities/`,
    data,
    ...requestConfig,
    headers: { ...headers, ...requestConfig.headers },
  })
  return res
}

/**
 * @summary Create Identity
 * {@link /v1/identities/}
 */
export function useCreateIdentity<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CreateIdentityMutationResponse>,
      ResponseErrorConfig<CreateIdentity422>,
      { data: CreateIdentityMutationRequest; headers?: CreateIdentityHeaderParams },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateIdentityMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? createIdentityMutationKey()

  return useMutation<
    ResponseConfig<CreateIdentityMutationResponse>,
    ResponseErrorConfig<CreateIdentity422>,
    { data: CreateIdentityMutationRequest; headers?: CreateIdentityHeaderParams },
    TContext
  >(
    {
      mutationFn: async ({ data, headers }) => {
        return createIdentity(data, headers, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}