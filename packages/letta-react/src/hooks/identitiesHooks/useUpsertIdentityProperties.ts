/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  UpsertIdentityPropertiesMutationRequest,
  UpsertIdentityPropertiesMutationResponse,
  UpsertIdentityPropertiesPathParams,
  UpsertIdentityProperties422,
} from '../../types/UpsertIdentityProperties.ts';
import type {
  RequestConfig,
  ResponseConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios';
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

export const upsertIdentityPropertiesMutationKey = () =>
  [{ url: '/v1/identities/{identity_id}/properties' }] as const;

export type UpsertIdentityPropertiesMutationKey = ReturnType<
  typeof upsertIdentityPropertiesMutationKey
>;

/**
 * @summary Upsert Identity Properties
 * {@link /v1/identities/:identity_id/properties}
 */
export async function upsertIdentityProperties(
  identity_id: UpsertIdentityPropertiesPathParams['identity_id'],
  data?: UpsertIdentityPropertiesMutationRequest,
  config: Partial<RequestConfig<UpsertIdentityPropertiesMutationRequest>> & {
    client?: typeof client;
  } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    UpsertIdentityPropertiesMutationResponse,
    ResponseErrorConfig<UpsertIdentityProperties422>,
    UpsertIdentityPropertiesMutationRequest
  >({
    method: 'PUT',
    url: `/v1/identities/${identity_id}/properties`,
    data,
    ...requestConfig,
  });
  return res;
}

/**
 * @summary Upsert Identity Properties
 * {@link /v1/identities/:identity_id/properties}
 */
export function useUpsertIdentityProperties<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UpsertIdentityPropertiesMutationResponse>,
      ResponseErrorConfig<UpsertIdentityProperties422>,
      {
        identity_id: UpsertIdentityPropertiesPathParams['identity_id'];
        data?: UpsertIdentityPropertiesMutationRequest;
      },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<UpsertIdentityPropertiesMutationRequest>> & {
      client?: typeof client;
    };
  } = {}
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {};
  const mutationKey =
    mutationOptions?.mutationKey ?? upsertIdentityPropertiesMutationKey();

  return useMutation<
    ResponseConfig<UpsertIdentityPropertiesMutationResponse>,
    ResponseErrorConfig<UpsertIdentityProperties422>,
    {
      identity_id: UpsertIdentityPropertiesPathParams['identity_id'];
      data?: UpsertIdentityPropertiesMutationRequest;
    },
    TContext
  >(
    {
      mutationFn: async ({ identity_id, data }) => {
        return upsertIdentityProperties(identity_id, data, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient
  );
}
