/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  ListGroupMessagesQueryResponse,
  ListGroupMessagesPathParams,
  ListGroupMessagesQueryParams,
  ListGroupMessages422,
} from '../../types/ListGroupMessages.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  InfiniteData,
  QueryKey,
  QueryClient,
  InfiniteQueryObserverOptions,
  UseInfiniteQueryResult,
} from '@tanstack/react-query';
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query';

export const listGroupMessagesInfiniteQueryKey = (
  group_id: ListGroupMessagesPathParams['group_id'],
  params?: ListGroupMessagesQueryParams
) =>
  [
    { url: '/v1/groups/:group_id/messages', params: { group_id: group_id } },
    ...(params ? [params] : []),
  ] as const;

export type ListGroupMessagesInfiniteQueryKey = ReturnType<
  typeof listGroupMessagesInfiniteQueryKey
>;

/**
 * @description Retrieve message history for an agent.
 * @summary List Group Messages
 * {@link /v1/groups/:group_id/messages}
 */
export async function listGroupMessagesInfinite(
  group_id: ListGroupMessagesPathParams['group_id'],
  params?: ListGroupMessagesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    ListGroupMessagesQueryResponse,
    ResponseErrorConfig<ListGroupMessages422>,
    unknown
  >({
    method: 'GET',
    url: `/v1/groups/${group_id}/messages`,
    params,
    ...requestConfig,
  });
  return res;
}

export function listGroupMessagesInfiniteQueryOptions(
  group_id: ListGroupMessagesPathParams['group_id'],
  params?: ListGroupMessagesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = listGroupMessagesInfiniteQueryKey(group_id, params);
  return infiniteQueryOptions<
    ResponseConfig<ListGroupMessagesQueryResponse>,
    ResponseErrorConfig<ListGroupMessages422>,
    ResponseConfig<ListGroupMessagesQueryResponse>,
    typeof queryKey,
    number
  >({
    enabled: !!group_id,
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal;

      if (params) {
        params['next_page'] =
          pageParam as unknown as ListGroupMessagesQueryParams['next_page'];
      }
      return listGroupMessagesInfinite(group_id, params, config);
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  });
}

/**
 * @description Retrieve message history for an agent.
 * @summary List Group Messages
 * {@link /v1/groups/:group_id/messages}
 */
export function useListGroupMessagesInfinite<
  TData = InfiniteData<ResponseConfig<ListGroupMessagesQueryResponse>>,
  TQueryData = ResponseConfig<ListGroupMessagesQueryResponse>,
  TQueryKey extends QueryKey = ListGroupMessagesInfiniteQueryKey
>(
  group_id: ListGroupMessagesPathParams['group_id'],
  params?: ListGroupMessagesQueryParams,
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<ListGroupMessagesQueryResponse>,
        ResponseErrorConfig<ListGroupMessages422>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ??
    listGroupMessagesInfiniteQueryKey(group_id, params);

  const query = useInfiniteQuery(
    {
      ...(listGroupMessagesInfiniteQueryOptions(
        group_id,
        params,
        config
      ) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<
        InfiniteQueryObserverOptions,
        'queryKey'
      >),
    },
    queryClient
  ) as UseInfiniteQueryResult<
    TData,
    ResponseErrorConfig<ListGroupMessages422>
  > & { queryKey: TQueryKey };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
