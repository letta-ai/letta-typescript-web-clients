/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  RetrieveRunUsageQueryResponse,
  RetrieveRunUsagePathParams,
  RetrieveRunUsage422,
} from '../../types/RetrieveRunUsage.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { queryOptions, useQuery } from '@tanstack/react-query';

export const retrieveRunUsageQueryKey = (
  run_id: RetrieveRunUsagePathParams['run_id']
) => [{ url: '/v1/runs/:run_id/usage', params: { run_id: run_id } }] as const;

export type RetrieveRunUsageQueryKey = ReturnType<
  typeof retrieveRunUsageQueryKey
>;

/**
 * @description Get usage statistics for a run.
 * @summary Retrieve Run Usage
 * {@link /v1/runs/:run_id/usage}
 */
export async function retrieveRunUsage(
  run_id: RetrieveRunUsagePathParams['run_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    RetrieveRunUsageQueryResponse,
    ResponseErrorConfig<RetrieveRunUsage422>,
    unknown
  >({
    method: 'GET',
    url: `/v1/runs/${run_id}/usage`,
    ...requestConfig,
  });
  return res;
}

export function retrieveRunUsageQueryOptions(
  run_id: RetrieveRunUsagePathParams['run_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = retrieveRunUsageQueryKey(run_id);
  return queryOptions<
    ResponseConfig<RetrieveRunUsageQueryResponse>,
    ResponseErrorConfig<RetrieveRunUsage422>,
    ResponseConfig<RetrieveRunUsageQueryResponse>,
    typeof queryKey
  >({
    enabled: !!run_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return retrieveRunUsage(run_id, config);
    },
  });
}

/**
 * @description Get usage statistics for a run.
 * @summary Retrieve Run Usage
 * {@link /v1/runs/:run_id/usage}
 */
export function useRetrieveRunUsage<
  TData = ResponseConfig<RetrieveRunUsageQueryResponse>,
  TQueryData = ResponseConfig<RetrieveRunUsageQueryResponse>,
  TQueryKey extends QueryKey = RetrieveRunUsageQueryKey
>(
  run_id: RetrieveRunUsagePathParams['run_id'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<RetrieveRunUsageQueryResponse>,
        ResponseErrorConfig<RetrieveRunUsage422>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? retrieveRunUsageQueryKey(run_id);

  const query = useQuery(
    {
      ...(retrieveRunUsageQueryOptions(
        run_id,
        config
      ) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient
  ) as UseQueryResult<TData, ResponseErrorConfig<RetrieveRunUsage422>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
