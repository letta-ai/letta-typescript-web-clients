/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  ListActiveRunsQueryResponse,
  ListActiveRunsQueryParams,
  ListActiveRuns422,
} from '../../types/ListActiveRuns.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  QueryKey,
  QueryClient,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query';

export const listActiveRunsSuspenseQueryKey = (
  params?: ListActiveRunsQueryParams
) => [{ url: '/v1/runs/active' }, ...(params ? [params] : [])] as const;

export type ListActiveRunsSuspenseQueryKey = ReturnType<
  typeof listActiveRunsSuspenseQueryKey
>;

/**
 * @description List all active runs.
 * @summary List Active Runs
 * {@link /v1/runs/active}
 */
export async function listActiveRunsSuspense(
  params?: ListActiveRunsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    ListActiveRunsQueryResponse,
    ResponseErrorConfig<ListActiveRuns422>,
    unknown
  >({
    method: 'GET',
    url: `/v1/runs/active`,
    params,
    ...requestConfig,
  });
  return res;
}

export function listActiveRunsSuspenseQueryOptions(
  params?: ListActiveRunsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = listActiveRunsSuspenseQueryKey(params);
  return queryOptions<
    ResponseConfig<ListActiveRunsQueryResponse>,
    ResponseErrorConfig<ListActiveRuns422>,
    ResponseConfig<ListActiveRunsQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return listActiveRunsSuspense(params, config);
    },
  });
}

/**
 * @description List all active runs.
 * @summary List Active Runs
 * {@link /v1/runs/active}
 */
export function useListActiveRunsSuspense<
  TData = ResponseConfig<ListActiveRunsQueryResponse>,
  TQueryData = ResponseConfig<ListActiveRunsQueryResponse>,
  TQueryKey extends QueryKey = ListActiveRunsSuspenseQueryKey
>(
  params?: ListActiveRunsQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<ListActiveRunsQueryResponse>,
        ResponseErrorConfig<ListActiveRuns422>,
        TData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? listActiveRunsSuspenseQueryKey(params);

  const query = useSuspenseQuery(
    {
      ...(listActiveRunsSuspenseQueryOptions(
        params,
        config
      ) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<ListActiveRuns422>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
