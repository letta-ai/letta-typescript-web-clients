/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { ListRunsQueryResponse, ListRunsQueryParams, ListRuns422 } from '../../types/ListRuns.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const listRunsQueryKey = (params?: ListRunsQueryParams) => [{ url: '/v1/runs/' }, ...(params ? [params] : [])] as const

export type ListRunsQueryKey = ReturnType<typeof listRunsQueryKey>

/**
 * @description List all runs.
 * @summary List Runs
 * {@link /v1/runs/}
 */
export async function listRuns(params?: ListRunsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ListRunsQueryResponse, ResponseErrorConfig<ListRuns422>, unknown>({ method: 'GET', url: `/v1/runs/`, params, ...requestConfig })
  return res
}

export function listRunsQueryOptions(params?: ListRunsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = listRunsQueryKey(params)
  return queryOptions<ResponseConfig<ListRunsQueryResponse>, ResponseErrorConfig<ListRuns422>, ResponseConfig<ListRunsQueryResponse>, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listRuns(params, config)
    },
  })
}

/**
 * @description List all runs.
 * @summary List Runs
 * {@link /v1/runs/}
 */
export function useListRuns<
  TData = ResponseConfig<ListRunsQueryResponse>,
  TQueryData = ResponseConfig<ListRunsQueryResponse>,
  TQueryKey extends QueryKey = ListRunsQueryKey,
>(
  params?: ListRunsQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<ResponseConfig<ListRunsQueryResponse>, ResponseErrorConfig<ListRuns422>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listRunsQueryKey(params)

  const query = useQuery(
    {
      ...(listRunsQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<ListRuns422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}