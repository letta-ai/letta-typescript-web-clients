/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  ListRunStepsQueryResponse,
  ListRunStepsPathParams,
  ListRunStepsQueryParams,
  ListRunSteps422,
} from '../../types/ListRunSteps.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { queryOptions, useQuery } from '@tanstack/react-query';

export const listRunStepsQueryKey = (
  run_id: ListRunStepsPathParams['run_id'],
  params?: ListRunStepsQueryParams
) =>
  [
    { url: '/v1/runs/:run_id/steps', params: { run_id: run_id } },
    ...(params ? [params] : []),
  ] as const;

export type ListRunStepsQueryKey = ReturnType<typeof listRunStepsQueryKey>;

/**
 * @description Get messages associated with a run with filtering options.Args:    run_id: ID of the run    before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.    after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.    limit: Maximum number of steps to return    order: Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.Returns:    A list of steps associated with the run.
 * @summary List Run Steps
 * {@link /v1/runs/:run_id/steps}
 */
export async function listRunSteps(
  run_id: ListRunStepsPathParams['run_id'],
  params?: ListRunStepsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    ListRunStepsQueryResponse,
    ResponseErrorConfig<ListRunSteps422>,
    unknown
  >({
    method: 'GET',
    url: `/v1/runs/${run_id}/steps`,
    params,
    ...requestConfig,
  });
  return res;
}

export function listRunStepsQueryOptions(
  run_id: ListRunStepsPathParams['run_id'],
  params?: ListRunStepsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = listRunStepsQueryKey(run_id, params);
  return queryOptions<
    ResponseConfig<ListRunStepsQueryResponse>,
    ResponseErrorConfig<ListRunSteps422>,
    ResponseConfig<ListRunStepsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!run_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return listRunSteps(run_id, params, config);
    },
  });
}

/**
 * @description Get messages associated with a run with filtering options.Args:    run_id: ID of the run    before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.    after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.    limit: Maximum number of steps to return    order: Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.Returns:    A list of steps associated with the run.
 * @summary List Run Steps
 * {@link /v1/runs/:run_id/steps}
 */
export function useListRunSteps<
  TData = ResponseConfig<ListRunStepsQueryResponse>,
  TQueryData = ResponseConfig<ListRunStepsQueryResponse>,
  TQueryKey extends QueryKey = ListRunStepsQueryKey
>(
  run_id: ListRunStepsPathParams['run_id'],
  params?: ListRunStepsQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<ListRunStepsQueryResponse>,
        ResponseErrorConfig<ListRunSteps422>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? listRunStepsQueryKey(run_id, params);

  const query = useQuery(
    {
      ...(listRunStepsQueryOptions(
        run_id,
        params,
        config
      ) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient
  ) as UseQueryResult<TData, ResponseErrorConfig<ListRunSteps422>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
