/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  ListAgentsQueryResponse,
  ListAgentsQueryParams,
  ListAgents422,
} from '../../types/ListAgents.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  InfiniteData,
  QueryKey,
  QueryClient,
  InfiniteQueryObserverOptions,
  UseInfiniteQueryResult,
} from '@tanstack/react-query';
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query';

export const listAgentsInfiniteQueryKey = (params?: ListAgentsQueryParams) =>
  [{ url: '/v1/agents/' }, ...(params ? [params] : [])] as const;

export type ListAgentsInfiniteQueryKey = ReturnType<
  typeof listAgentsInfiniteQueryKey
>;

/**
 * @description List all agents associated with a given user.This endpoint retrieves a list of all agents and their configurationsassociated with the specified user ID.
 * @summary List Agents
 * {@link /v1/agents/}
 */
export async function listAgentsInfinite(
  params?: ListAgentsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    ListAgentsQueryResponse,
    ResponseErrorConfig<ListAgents422>,
    unknown
  >({
    method: 'GET',
    url: `/v1/agents/`,
    params,
    ...requestConfig,
  });
  return res;
}

export function listAgentsInfiniteQueryOptions(
  params?: ListAgentsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = listAgentsInfiniteQueryKey(params);
  return infiniteQueryOptions<
    ResponseConfig<ListAgentsQueryResponse>,
    ResponseErrorConfig<ListAgents422>,
    ResponseConfig<ListAgentsQueryResponse>,
    typeof queryKey,
    number
  >({
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal;

      if (params) {
        params['next_page'] =
          pageParam as unknown as ListAgentsQueryParams['next_page'];
      }
      return listAgentsInfinite(params, config);
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  });
}

/**
 * @description List all agents associated with a given user.This endpoint retrieves a list of all agents and their configurationsassociated with the specified user ID.
 * @summary List Agents
 * {@link /v1/agents/}
 */
export function useListAgentsInfinite<
  TData = InfiniteData<ResponseConfig<ListAgentsQueryResponse>>,
  TQueryData = ResponseConfig<ListAgentsQueryResponse>,
  TQueryKey extends QueryKey = ListAgentsInfiniteQueryKey
>(
  params?: ListAgentsQueryParams,
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<ListAgentsQueryResponse>,
        ResponseErrorConfig<ListAgents422>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? listAgentsInfiniteQueryKey(params);

  const query = useInfiniteQuery(
    {
      ...(listAgentsInfiniteQueryOptions(
        params,
        config
      ) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<
        InfiniteQueryObserverOptions,
        'queryKey'
      >),
    },
    queryClient
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<ListAgents422>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
