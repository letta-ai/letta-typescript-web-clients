/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  ListPassagesQueryResponse,
  ListPassagesPathParams,
  ListPassagesQueryParams,
  ListPassages422,
} from '../../types/ListPassages.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  QueryKey,
  QueryClient,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query';

export const listPassagesSuspenseQueryKey = (
  agent_id: ListPassagesPathParams['agent_id'],
  params?: ListPassagesQueryParams
) =>
  [
    {
      url: '/v1/agents/:agent_id/archival-memory',
      params: { agent_id: agent_id },
    },
    ...(params ? [params] : []),
  ] as const;

export type ListPassagesSuspenseQueryKey = ReturnType<
  typeof listPassagesSuspenseQueryKey
>;

/**
 * @description Retrieve the memories in an agent's archival memory store (paginated query).
 * @summary List Passages
 * {@link /v1/agents/:agent_id/archival-memory}
 */
export async function listPassagesSuspense(
  agent_id: ListPassagesPathParams['agent_id'],
  params?: ListPassagesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    ListPassagesQueryResponse,
    ResponseErrorConfig<ListPassages422>,
    unknown
  >({
    method: 'GET',
    url: `/v1/agents/${agent_id}/archival-memory`,
    params,
    ...requestConfig,
  });
  return res;
}

export function listPassagesSuspenseQueryOptions(
  agent_id: ListPassagesPathParams['agent_id'],
  params?: ListPassagesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = listPassagesSuspenseQueryKey(agent_id, params);
  return queryOptions<
    ResponseConfig<ListPassagesQueryResponse>,
    ResponseErrorConfig<ListPassages422>,
    ResponseConfig<ListPassagesQueryResponse>,
    typeof queryKey
  >({
    enabled: !!agent_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return listPassagesSuspense(agent_id, params, config);
    },
  });
}

/**
 * @description Retrieve the memories in an agent's archival memory store (paginated query).
 * @summary List Passages
 * {@link /v1/agents/:agent_id/archival-memory}
 */
export function useListPassagesSuspense<
  TData = ResponseConfig<ListPassagesQueryResponse>,
  TQueryData = ResponseConfig<ListPassagesQueryResponse>,
  TQueryKey extends QueryKey = ListPassagesSuspenseQueryKey
>(
  agent_id: ListPassagesPathParams['agent_id'],
  params?: ListPassagesQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<ListPassagesQueryResponse>,
        ResponseErrorConfig<ListPassages422>,
        TData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? listPassagesSuspenseQueryKey(agent_id, params);

  const query = useSuspenseQuery(
    {
      ...(listPassagesSuspenseQueryOptions(
        agent_id,
        params,
        config
      ) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<ListPassages422>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
