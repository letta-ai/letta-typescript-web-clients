/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  RetrieveCoreMemoryBlockQueryResponse,
  RetrieveCoreMemoryBlockPathParams,
  RetrieveCoreMemoryBlock422,
} from '../../types/RetrieveCoreMemoryBlock.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const retrieveCoreMemoryBlockSuspenseQueryKey = (
  agent_id: RetrieveCoreMemoryBlockPathParams['agent_id'],
  block_label: RetrieveCoreMemoryBlockPathParams['block_label'],
) => [{ url: '/v1/agents/:agent_id/core-memory/blocks/:block_label', params: { agent_id: agent_id, block_label: block_label } }] as const

export type RetrieveCoreMemoryBlockSuspenseQueryKey = ReturnType<typeof retrieveCoreMemoryBlockSuspenseQueryKey>

/**
 * @description Retrieve a core memory block from an agent.
 * @summary Retrieve Block
 * {@link /v1/agents/:agent_id/core-memory/blocks/:block_label}
 */
export async function retrieveCoreMemoryBlockSuspense(
  agent_id: RetrieveCoreMemoryBlockPathParams['agent_id'],
  block_label: RetrieveCoreMemoryBlockPathParams['block_label'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<RetrieveCoreMemoryBlockQueryResponse, ResponseErrorConfig<RetrieveCoreMemoryBlock422>, unknown>({
    method: 'GET',
    url: `/v1/agents/${agent_id}/core-memory/blocks/${block_label}`,
    ...requestConfig,
  })
  return res
}

export function retrieveCoreMemoryBlockSuspenseQueryOptions(
  agent_id: RetrieveCoreMemoryBlockPathParams['agent_id'],
  block_label: RetrieveCoreMemoryBlockPathParams['block_label'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = retrieveCoreMemoryBlockSuspenseQueryKey(agent_id, block_label)
  return queryOptions<
    ResponseConfig<RetrieveCoreMemoryBlockQueryResponse>,
    ResponseErrorConfig<RetrieveCoreMemoryBlock422>,
    ResponseConfig<RetrieveCoreMemoryBlockQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(agent_id && block_label),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return retrieveCoreMemoryBlockSuspense(agent_id, block_label, config)
    },
  })
}

/**
 * @description Retrieve a core memory block from an agent.
 * @summary Retrieve Block
 * {@link /v1/agents/:agent_id/core-memory/blocks/:block_label}
 */
export function useRetrieveCoreMemoryBlockSuspense<
  TData = ResponseConfig<RetrieveCoreMemoryBlockQueryResponse>,
  TQueryData = ResponseConfig<RetrieveCoreMemoryBlockQueryResponse>,
  TQueryKey extends QueryKey = RetrieveCoreMemoryBlockSuspenseQueryKey,
>(
  agent_id: RetrieveCoreMemoryBlockPathParams['agent_id'],
  block_label: RetrieveCoreMemoryBlockPathParams['block_label'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<ResponseConfig<RetrieveCoreMemoryBlockQueryResponse>, ResponseErrorConfig<RetrieveCoreMemoryBlock422>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? retrieveCoreMemoryBlockSuspenseQueryKey(agent_id, block_label)

  const query = useSuspenseQuery(
    {
      ...(retrieveCoreMemoryBlockSuspenseQueryOptions(agent_id, block_label, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<RetrieveCoreMemoryBlock422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}