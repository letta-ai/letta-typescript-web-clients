/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  CreateAgentMutationRequest,
  CreateAgentMutationResponse,
  CreateAgentHeaderParams,
  CreateAgent422,
} from '../../types/CreateAgent.ts';
import type {
  RequestConfig,
  ResponseConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios';
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

export const createAgentMutationKey = () => [{ url: '/v1/agents/' }] as const;

export type CreateAgentMutationKey = ReturnType<typeof createAgentMutationKey>;

/**
 * @description Create a new agent with the specified configuration.
 * @summary Create Agent
 * {@link /v1/agents/}
 */
export async function createAgent(
  data?: CreateAgentMutationRequest,
  headers?: CreateAgentHeaderParams,
  config: Partial<RequestConfig<CreateAgentMutationRequest>> & {
    client?: typeof client;
  } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    CreateAgentMutationResponse,
    ResponseErrorConfig<CreateAgent422>,
    CreateAgentMutationRequest
  >({
    method: 'POST',
    url: `/v1/agents/`,
    data,
    ...requestConfig,
    headers: { ...headers, ...requestConfig.headers },
  });
  return res;
}

/**
 * @description Create a new agent with the specified configuration.
 * @summary Create Agent
 * {@link /v1/agents/}
 */
export function useCreateAgent<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CreateAgentMutationResponse>,
      ResponseErrorConfig<CreateAgent422>,
      { data?: CreateAgentMutationRequest; headers?: CreateAgentHeaderParams },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<CreateAgentMutationRequest>> & {
      client?: typeof client;
    };
  } = {}
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {};
  const mutationKey = mutationOptions?.mutationKey ?? createAgentMutationKey();

  return useMutation<
    ResponseConfig<CreateAgentMutationResponse>,
    ResponseErrorConfig<CreateAgent422>,
    { data?: CreateAgentMutationRequest; headers?: CreateAgentHeaderParams },
    TContext
  >(
    {
      mutationFn: async ({ data, headers }) => {
        return createAgent(data, headers, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient
  );
}
