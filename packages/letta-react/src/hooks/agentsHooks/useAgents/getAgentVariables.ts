/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  AgentsGetAgentVariablesQueryResponse,
  AgentsGetAgentVariablesPathParams,
  AgentsGetAgentVariables404,
} from '../../../types/agents/GetAgentVariables.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { queryOptions, useQuery } from '@tanstack/react-query';

export const agentsGetAgentVariablesQueryKey = (
  agent_id: AgentsGetAgentVariablesPathParams['agent_id']
) =>
  [
    {
      url: '/v1/agents/:agent_id/core-memory/variables',
      params: { agent_id: agent_id },
    },
  ] as const;

export type AgentsGetAgentVariablesQueryKey = ReturnType<
  typeof agentsGetAgentVariablesQueryKey
>;

/**
 * @description Get the variables associated with an agent
 * @summary Retrieve Memory Variables
 * {@link /v1/agents/:agent_id/core-memory/variables}
 */
export async function agentsGetAgentVariables(
  agent_id: AgentsGetAgentVariablesPathParams['agent_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    AgentsGetAgentVariablesQueryResponse,
    ResponseErrorConfig<AgentsGetAgentVariables404>,
    unknown
  >({
    method: 'GET',
    url: `/v1/agents/${agent_id}/core-memory/variables`,
    ...requestConfig,
  });
  return res;
}

export function agentsGetAgentVariablesQueryOptions(
  agent_id: AgentsGetAgentVariablesPathParams['agent_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = agentsGetAgentVariablesQueryKey(agent_id);
  return queryOptions<
    ResponseConfig<AgentsGetAgentVariablesQueryResponse>,
    ResponseErrorConfig<AgentsGetAgentVariables404>,
    ResponseConfig<AgentsGetAgentVariablesQueryResponse>,
    typeof queryKey
  >({
    enabled: !!agent_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return agentsGetAgentVariables(agent_id, config);
    },
  });
}

/**
 * @description Get the variables associated with an agent
 * @summary Retrieve Memory Variables
 * {@link /v1/agents/:agent_id/core-memory/variables}
 */
export function useAgentsGetAgentVariables<
  TData = ResponseConfig<AgentsGetAgentVariablesQueryResponse>,
  TQueryData = ResponseConfig<AgentsGetAgentVariablesQueryResponse>,
  TQueryKey extends QueryKey = AgentsGetAgentVariablesQueryKey
>(
  agent_id: AgentsGetAgentVariablesPathParams['agent_id'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<AgentsGetAgentVariablesQueryResponse>,
        ResponseErrorConfig<AgentsGetAgentVariables404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? agentsGetAgentVariablesQueryKey(agent_id);

  const query = useQuery(
    {
      ...(agentsGetAgentVariablesQueryOptions(
        agent_id,
        config
      ) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<AgentsGetAgentVariables404>
  > & { queryKey: TQueryKey };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
