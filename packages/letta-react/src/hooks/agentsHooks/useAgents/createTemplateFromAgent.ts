/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  AgentsCreateTemplateFromAgentMutationRequest,
  AgentsCreateTemplateFromAgentMutationResponse,
  AgentsCreateTemplateFromAgentPathParams,
  AgentsCreateTemplateFromAgent500,
} from '../../../types/agents/CreateTemplateFromAgent.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const agentsCreateTemplateFromAgentMutationKey = () => [{ url: '/v1/agents/{agent_id}/template' }] as const

export type AgentsCreateTemplateFromAgentMutationKey = ReturnType<typeof agentsCreateTemplateFromAgentMutationKey>

/**
 * @description Create a template from an agent
 * @summary Create Template From Agent
 * {@link /v1/agents/:agent_id/template}
 */
export async function agentsCreateTemplateFromAgent(
  agent_id: AgentsCreateTemplateFromAgentPathParams['agent_id'],
  data?: AgentsCreateTemplateFromAgentMutationRequest,
  config: Partial<RequestConfig<AgentsCreateTemplateFromAgentMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    AgentsCreateTemplateFromAgentMutationResponse,
    ResponseErrorConfig<AgentsCreateTemplateFromAgent500>,
    AgentsCreateTemplateFromAgentMutationRequest
  >({ method: 'POST', url: `/v1/agents/${agent_id}/template`, data, ...requestConfig })
  return res
}

/**
 * @description Create a template from an agent
 * @summary Create Template From Agent
 * {@link /v1/agents/:agent_id/template}
 */
export function useAgentsCreateTemplateFromAgent<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<AgentsCreateTemplateFromAgentMutationResponse>,
      ResponseErrorConfig<AgentsCreateTemplateFromAgent500>,
      { agent_id: AgentsCreateTemplateFromAgentPathParams['agent_id']; data?: AgentsCreateTemplateFromAgentMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<AgentsCreateTemplateFromAgentMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? agentsCreateTemplateFromAgentMutationKey()

  return useMutation<
    ResponseConfig<AgentsCreateTemplateFromAgentMutationResponse>,
    ResponseErrorConfig<AgentsCreateTemplateFromAgent500>,
    { agent_id: AgentsCreateTemplateFromAgentPathParams['agent_id']; data?: AgentsCreateTemplateFromAgentMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ agent_id, data }) => {
        return agentsCreateTemplateFromAgent(agent_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}