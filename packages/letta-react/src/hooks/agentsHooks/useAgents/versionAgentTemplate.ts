/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  AgentsVersionAgentTemplateMutationRequest,
  AgentsVersionAgentTemplateMutationResponse,
  AgentsVersionAgentTemplatePathParams,
  AgentsVersionAgentTemplateQueryParams,
  AgentsVersionAgentTemplate404,
  AgentsVersionAgentTemplate500,
} from '../../../types/agents/VersionAgentTemplate.ts';
import type {
  RequestConfig,
  ResponseConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios';
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

export const agentsVersionAgentTemplateMutationKey = () =>
  [{ url: '/v1/agents/{agent_id}/version-template' }] as const;

export type AgentsVersionAgentTemplateMutationKey = ReturnType<
  typeof agentsVersionAgentTemplateMutationKey
>;

/**
 * @description Creates a versioned version of an agent
 * @summary Version Agent Template
 * {@link /v1/agents/:agent_id/version-template}
 */
export async function agentsVersionAgentTemplate(
  agent_id: AgentsVersionAgentTemplatePathParams['agent_id'],
  data?: AgentsVersionAgentTemplateMutationRequest,
  params?: AgentsVersionAgentTemplateQueryParams,
  config: Partial<RequestConfig<AgentsVersionAgentTemplateMutationRequest>> & {
    client?: typeof client;
  } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    AgentsVersionAgentTemplateMutationResponse,
    ResponseErrorConfig<
      AgentsVersionAgentTemplate404 | AgentsVersionAgentTemplate500
    >,
    AgentsVersionAgentTemplateMutationRequest
  >({
    method: 'POST',
    url: `/v1/agents/${agent_id}/version-template`,
    params,
    data,
    ...requestConfig,
  });
  return res;
}

/**
 * @description Creates a versioned version of an agent
 * @summary Version Agent Template
 * {@link /v1/agents/:agent_id/version-template}
 */
export function useAgentsVersionAgentTemplate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<AgentsVersionAgentTemplateMutationResponse>,
      ResponseErrorConfig<
        AgentsVersionAgentTemplate404 | AgentsVersionAgentTemplate500
      >,
      {
        agent_id: AgentsVersionAgentTemplatePathParams['agent_id'];
        data?: AgentsVersionAgentTemplateMutationRequest;
        params?: AgentsVersionAgentTemplateQueryParams;
      },
      TContext
    > & { client?: QueryClient };
    client?: Partial<
      RequestConfig<AgentsVersionAgentTemplateMutationRequest>
    > & { client?: typeof client };
  } = {}
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {};
  const mutationKey =
    mutationOptions?.mutationKey ?? agentsVersionAgentTemplateMutationKey();

  return useMutation<
    ResponseConfig<AgentsVersionAgentTemplateMutationResponse>,
    ResponseErrorConfig<
      AgentsVersionAgentTemplate404 | AgentsVersionAgentTemplate500
    >,
    {
      agent_id: AgentsVersionAgentTemplatePathParams['agent_id'];
      data?: AgentsVersionAgentTemplateMutationRequest;
      params?: AgentsVersionAgentTemplateQueryParams;
    },
    TContext
  >(
    {
      mutationFn: async ({ agent_id, data, params }) => {
        return agentsVersionAgentTemplate(agent_id, data, params, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient
  );
}
