/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  AgentsSearchDeployedAgentsMutationRequest,
  AgentsSearchDeployedAgentsMutationResponse,
} from '../../../types/agents/SearchDeployedAgents.ts';
import type {
  RequestConfig,
  ResponseConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios';
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

export const agentsSearchDeployedAgentsMutationKey = () =>
  [{ url: '/v1/agents/search' }] as const;

export type AgentsSearchDeployedAgentsMutationKey = ReturnType<
  typeof agentsSearchDeployedAgentsMutationKey
>;

/**
 * @description Search deployed agents
 * @summary Search Deployed Agents
 * {@link /v1/agents/search}
 */
export async function agentsSearchDeployedAgents(
  data?: AgentsSearchDeployedAgentsMutationRequest,
  config: Partial<RequestConfig<AgentsSearchDeployedAgentsMutationRequest>> & {
    client?: typeof client;
  } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    AgentsSearchDeployedAgentsMutationResponse,
    ResponseErrorConfig<Error>,
    AgentsSearchDeployedAgentsMutationRequest
  >({
    method: 'POST',
    url: `/v1/agents/search`,
    data,
    ...requestConfig,
  });
  return res;
}

/**
 * @description Search deployed agents
 * @summary Search Deployed Agents
 * {@link /v1/agents/search}
 */
export function useAgentsSearchDeployedAgents<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<AgentsSearchDeployedAgentsMutationResponse>,
      ResponseErrorConfig<Error>,
      { data?: AgentsSearchDeployedAgentsMutationRequest },
      TContext
    > & { client?: QueryClient };
    client?: Partial<
      RequestConfig<AgentsSearchDeployedAgentsMutationRequest>
    > & { client?: typeof client };
  } = {}
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {};
  const mutationKey =
    mutationOptions?.mutationKey ?? agentsSearchDeployedAgentsMutationKey();

  return useMutation<
    ResponseConfig<AgentsSearchDeployedAgentsMutationResponse>,
    ResponseErrorConfig<Error>,
    { data?: AgentsSearchDeployedAgentsMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return agentsSearchDeployedAgents(data, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient
  );
}
