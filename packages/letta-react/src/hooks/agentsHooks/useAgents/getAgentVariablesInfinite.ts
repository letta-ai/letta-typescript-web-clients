/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  AgentsGetAgentVariablesQueryResponse,
  AgentsGetAgentVariablesPathParams,
  AgentsGetAgentVariables404,
} from '../../../types/agents/GetAgentVariables.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  InfiniteData,
  QueryKey,
  QueryClient,
  InfiniteQueryObserverOptions,
  UseInfiniteQueryResult,
} from '@tanstack/react-query';
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query';

export const agentsGetAgentVariablesInfiniteQueryKey = (
  agent_id: AgentsGetAgentVariablesPathParams['agent_id']
) =>
  [
    {
      url: '/v1/agents/:agent_id/core-memory/variables',
      params: { agent_id: agent_id },
    },
  ] as const;

export type AgentsGetAgentVariablesInfiniteQueryKey = ReturnType<
  typeof agentsGetAgentVariablesInfiniteQueryKey
>;

/**
 * @description Get the variables associated with an agent
 * @summary Retrieve Memory Variables
 * {@link /v1/agents/:agent_id/core-memory/variables}
 */
export async function agentsGetAgentVariablesInfinite(
  agent_id: AgentsGetAgentVariablesPathParams['agent_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    AgentsGetAgentVariablesQueryResponse,
    ResponseErrorConfig<AgentsGetAgentVariables404>,
    unknown
  >({
    method: 'GET',
    url: `/v1/agents/${agent_id}/core-memory/variables`,
    ...requestConfig,
  });
  return res;
}

export function agentsGetAgentVariablesInfiniteQueryOptions(
  agent_id: AgentsGetAgentVariablesPathParams['agent_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = agentsGetAgentVariablesInfiniteQueryKey(agent_id);
  return infiniteQueryOptions<
    ResponseConfig<AgentsGetAgentVariablesQueryResponse>,
    ResponseErrorConfig<AgentsGetAgentVariables404>,
    ResponseConfig<AgentsGetAgentVariablesQueryResponse>,
    typeof queryKey
  >({
    enabled: !!agent_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return agentsGetAgentVariablesInfinite(agent_id, config);
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  });
}

/**
 * @description Get the variables associated with an agent
 * @summary Retrieve Memory Variables
 * {@link /v1/agents/:agent_id/core-memory/variables}
 */
export function useAgentsGetAgentVariablesInfinite<
  TData = InfiniteData<ResponseConfig<AgentsGetAgentVariablesQueryResponse>>,
  TQueryData = ResponseConfig<AgentsGetAgentVariablesQueryResponse>,
  TQueryKey extends QueryKey = AgentsGetAgentVariablesInfiniteQueryKey
>(
  agent_id: AgentsGetAgentVariablesPathParams['agent_id'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<AgentsGetAgentVariablesQueryResponse>,
        ResponseErrorConfig<AgentsGetAgentVariables404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? agentsGetAgentVariablesInfiniteQueryKey(agent_id);

  const query = useInfiniteQuery(
    {
      ...(agentsGetAgentVariablesInfiniteQueryOptions(
        agent_id,
        config
      ) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<
        InfiniteQueryObserverOptions,
        'queryKey'
      >),
    },
    queryClient
  ) as UseInfiniteQueryResult<
    TData,
    ResponseErrorConfig<AgentsGetAgentVariables404>
  > & { queryKey: TQueryKey };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
