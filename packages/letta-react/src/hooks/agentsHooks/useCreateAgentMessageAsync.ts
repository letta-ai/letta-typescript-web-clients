/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  CreateAgentMessageAsyncMutationRequest,
  CreateAgentMessageAsyncMutationResponse,
  CreateAgentMessageAsyncPathParams,
  CreateAgentMessageAsync422,
} from '../../types/CreateAgentMessageAsync.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const createAgentMessageAsyncMutationKey = () => [{ url: '/v1/agents/{agent_id}/messages/async' }] as const

export type CreateAgentMessageAsyncMutationKey = ReturnType<typeof createAgentMessageAsyncMutationKey>

/**
 * @description Asynchronously process a user message and return a run object.The actual processing happens in the background, and the status can be checked using the run ID.
 * @summary Send Message Async
 * {@link /v1/agents/:agent_id/messages/async}
 */
export async function createAgentMessageAsync(
  agent_id: CreateAgentMessageAsyncPathParams['agent_id'],
  data: CreateAgentMessageAsyncMutationRequest,
  config: Partial<RequestConfig<CreateAgentMessageAsyncMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CreateAgentMessageAsyncMutationResponse, ResponseErrorConfig<CreateAgentMessageAsync422>, CreateAgentMessageAsyncMutationRequest>({
    method: 'POST',
    url: `/v1/agents/${agent_id}/messages/async`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @description Asynchronously process a user message and return a run object.The actual processing happens in the background, and the status can be checked using the run ID.
 * @summary Send Message Async
 * {@link /v1/agents/:agent_id/messages/async}
 */
export function useCreateAgentMessageAsync<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<CreateAgentMessageAsyncMutationResponse>,
      ResponseErrorConfig<CreateAgentMessageAsync422>,
      { agent_id: CreateAgentMessageAsyncPathParams['agent_id']; data: CreateAgentMessageAsyncMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateAgentMessageAsyncMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? createAgentMessageAsyncMutationKey()

  return useMutation<
    ResponseConfig<CreateAgentMessageAsyncMutationResponse>,
    ResponseErrorConfig<CreateAgentMessageAsync422>,
    { agent_id: CreateAgentMessageAsyncPathParams['agent_id']; data: CreateAgentMessageAsyncMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ agent_id, data }) => {
        return createAgentMessageAsync(agent_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}