/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { ListAgentSourcesQueryResponse, ListAgentSourcesPathParams, ListAgentSources422 } from '../../types/ListAgentSources.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const listAgentSourcesSuspenseQueryKey = (agent_id: ListAgentSourcesPathParams['agent_id']) =>
  [{ url: '/v1/agents/:agent_id/sources', params: { agent_id: agent_id } }] as const

export type ListAgentSourcesSuspenseQueryKey = ReturnType<typeof listAgentSourcesSuspenseQueryKey>

/**
 * @description Get the sources associated with an agent.
 * @summary List Agent Sources
 * {@link /v1/agents/:agent_id/sources}
 */
export async function listAgentSourcesSuspense(
  agent_id: ListAgentSourcesPathParams['agent_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ListAgentSourcesQueryResponse, ResponseErrorConfig<ListAgentSources422>, unknown>({
    method: 'GET',
    url: `/v1/agents/${agent_id}/sources`,
    ...requestConfig,
  })
  return res
}

export function listAgentSourcesSuspenseQueryOptions(
  agent_id: ListAgentSourcesPathParams['agent_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = listAgentSourcesSuspenseQueryKey(agent_id)
  return queryOptions<
    ResponseConfig<ListAgentSourcesQueryResponse>,
    ResponseErrorConfig<ListAgentSources422>,
    ResponseConfig<ListAgentSourcesQueryResponse>,
    typeof queryKey
  >({
    enabled: !!agent_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listAgentSourcesSuspense(agent_id, config)
    },
  })
}

/**
 * @description Get the sources associated with an agent.
 * @summary List Agent Sources
 * {@link /v1/agents/:agent_id/sources}
 */
export function useListAgentSourcesSuspense<
  TData = ResponseConfig<ListAgentSourcesQueryResponse>,
  TQueryData = ResponseConfig<ListAgentSourcesQueryResponse>,
  TQueryKey extends QueryKey = ListAgentSourcesSuspenseQueryKey,
>(
  agent_id: ListAgentSourcesPathParams['agent_id'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<ResponseConfig<ListAgentSourcesQueryResponse>, ResponseErrorConfig<ListAgentSources422>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listAgentSourcesSuspenseQueryKey(agent_id)

  const query = useSuspenseQuery(
    {
      ...(listAgentSourcesSuspenseQueryOptions(agent_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<ListAgentSources422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}