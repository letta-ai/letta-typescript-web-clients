/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  TemplatesCreateAgentsFromTemplateMutationRequest,
  TemplatesCreateAgentsFromTemplateMutationResponse,
  TemplatesCreateAgentsFromTemplatePathParams,
} from '../../../types/templates/CreateAgentsFromTemplate.ts';
import type {
  RequestConfig,
  ResponseConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios';
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

export const templatesCreateAgentsFromTemplateMutationKey = () =>
  [{ url: '/v1/templates/{project}/{template_version}/agents' }] as const;

export type TemplatesCreateAgentsFromTemplateMutationKey = ReturnType<
  typeof templatesCreateAgentsFromTemplateMutationKey
>;

/**
 * @description Creates an Agent or multiple Agents from a template
 * @summary Create agents from a template
 * {@link /v1/templates/:project/:template_version/agents}
 */
export async function templatesCreateAgentsFromTemplate(
  project: TemplatesCreateAgentsFromTemplatePathParams['project'],
  template_version: TemplatesCreateAgentsFromTemplatePathParams['template_version'],
  data?: TemplatesCreateAgentsFromTemplateMutationRequest,
  config: Partial<
    RequestConfig<TemplatesCreateAgentsFromTemplateMutationRequest>
  > & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    TemplatesCreateAgentsFromTemplateMutationResponse,
    ResponseErrorConfig<Error>,
    TemplatesCreateAgentsFromTemplateMutationRequest
  >({
    method: 'POST',
    url: `/v1/templates/${project}/${template_version}/agents`,
    data,
    ...requestConfig,
  });
  return res;
}

/**
 * @description Creates an Agent or multiple Agents from a template
 * @summary Create agents from a template
 * {@link /v1/templates/:project/:template_version/agents}
 */
export function useTemplatesCreateAgentsFromTemplate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<TemplatesCreateAgentsFromTemplateMutationResponse>,
      ResponseErrorConfig<Error>,
      {
        project: TemplatesCreateAgentsFromTemplatePathParams['project'];
        template_version: TemplatesCreateAgentsFromTemplatePathParams['template_version'];
        data?: TemplatesCreateAgentsFromTemplateMutationRequest;
      },
      TContext
    > & { client?: QueryClient };
    client?: Partial<
      RequestConfig<TemplatesCreateAgentsFromTemplateMutationRequest>
    > & { client?: typeof client };
  } = {}
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {};
  const mutationKey =
    mutationOptions?.mutationKey ??
    templatesCreateAgentsFromTemplateMutationKey();

  return useMutation<
    ResponseConfig<TemplatesCreateAgentsFromTemplateMutationResponse>,
    ResponseErrorConfig<Error>,
    {
      project: TemplatesCreateAgentsFromTemplatePathParams['project'];
      template_version: TemplatesCreateAgentsFromTemplatePathParams['template_version'];
      data?: TemplatesCreateAgentsFromTemplateMutationRequest;
    },
    TContext
  >(
    {
      mutationFn: async ({ project, template_version, data }) => {
        return templatesCreateAgentsFromTemplate(
          project,
          template_version,
          data,
          config
        );
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient
  );
}
