/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type {
  RetrieveStepQueryResponse,
  RetrieveStepPathParams,
  RetrieveStep422,
} from '../../types/RetrieveStep.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  InfiniteData,
  QueryKey,
  QueryClient,
  InfiniteQueryObserverOptions,
  UseInfiniteQueryResult,
} from '@tanstack/react-query';
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query';

export const retrieveStepInfiniteQueryKey = (
  step_id: RetrieveStepPathParams['step_id']
) => [{ url: '/v1/steps/:step_id', params: { step_id: step_id } }] as const;

export type RetrieveStepInfiniteQueryKey = ReturnType<
  typeof retrieveStepInfiniteQueryKey
>;

/**
 * @description Get a step by ID.
 * @summary Retrieve Step
 * {@link /v1/steps/:step_id}
 */
export async function retrieveStepInfinite(
  step_id: RetrieveStepPathParams['step_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    RetrieveStepQueryResponse,
    ResponseErrorConfig<RetrieveStep422>,
    unknown
  >({
    method: 'GET',
    url: `/v1/steps/${step_id}`,
    ...requestConfig,
  });
  return res;
}

export function retrieveStepInfiniteQueryOptions(
  step_id: RetrieveStepPathParams['step_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = retrieveStepInfiniteQueryKey(step_id);
  return infiniteQueryOptions<
    ResponseConfig<RetrieveStepQueryResponse>,
    ResponseErrorConfig<RetrieveStep422>,
    ResponseConfig<RetrieveStepQueryResponse>,
    typeof queryKey
  >({
    enabled: !!step_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return retrieveStepInfinite(step_id, config);
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  });
}

/**
 * @description Get a step by ID.
 * @summary Retrieve Step
 * {@link /v1/steps/:step_id}
 */
export function useRetrieveStepInfinite<
  TData = InfiniteData<ResponseConfig<RetrieveStepQueryResponse>>,
  TQueryData = ResponseConfig<RetrieveStepQueryResponse>,
  TQueryKey extends QueryKey = RetrieveStepInfiniteQueryKey
>(
  step_id: RetrieveStepPathParams['step_id'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<RetrieveStepQueryResponse>,
        ResponseErrorConfig<RetrieveStep422>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? retrieveStepInfiniteQueryKey(step_id);

  const query = useInfiniteQuery(
    {
      ...(retrieveStepInfiniteQueryOptions(
        step_id,
        config
      ) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<
        InfiniteQueryObserverOptions,
        'queryKey'
      >),
    },
    queryClient
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<RetrieveStep422>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
