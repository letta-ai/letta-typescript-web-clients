/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios';
import type { ListEmbeddingModelsQueryResponse } from '../../types/ListEmbeddingModels.ts';
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from '@kubb/plugin-client/clients/axios';
import type {
  InfiniteData,
  QueryKey,
  QueryClient,
  InfiniteQueryObserverOptions,
  UseInfiniteQueryResult,
} from '@tanstack/react-query';
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query';

export const listEmbeddingModelsInfiniteQueryKey = () =>
  [{ url: '/v1/models/embedding' }] as const;

export type ListEmbeddingModelsInfiniteQueryKey = ReturnType<
  typeof listEmbeddingModelsInfiniteQueryKey
>;

/**
 * @summary List Embedding Backends
 * {@link /v1/models/embedding}
 */
export async function listEmbeddingModelsInfinite(
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    ListEmbeddingModelsQueryResponse,
    ResponseErrorConfig<Error>,
    unknown
  >({
    method: 'GET',
    url: `/v1/models/embedding`,
    ...requestConfig,
  });
  return res;
}

export function listEmbeddingModelsInfiniteQueryOptions(
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = listEmbeddingModelsInfiniteQueryKey();
  return infiniteQueryOptions<
    ResponseConfig<ListEmbeddingModelsQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<ListEmbeddingModelsQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return listEmbeddingModelsInfinite(config);
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  });
}

/**
 * @summary List Embedding Backends
 * {@link /v1/models/embedding}
 */
export function useListEmbeddingModelsInfinite<
  TData = InfiniteData<ResponseConfig<ListEmbeddingModelsQueryResponse>>,
  TQueryData = ResponseConfig<ListEmbeddingModelsQueryResponse>,
  TQueryKey extends QueryKey = ListEmbeddingModelsInfiniteQueryKey
>(
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<ListEmbeddingModelsQueryResponse>,
        ResponseErrorConfig<Error>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? listEmbeddingModelsInfiniteQueryKey();

  const query = useInfiniteQuery(
    {
      ...(listEmbeddingModelsInfiniteQueryOptions(
        config
      ) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<
        InfiniteQueryObserverOptions,
        'queryKey'
      >),
    },
    queryClient
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
